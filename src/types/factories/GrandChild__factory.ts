/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GrandChild, GrandChildInterface } from "../GrandChild";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "grandChildState",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "run",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a28061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063071d992b146037578063c0406226146053575b600080fd5b603d605b565b6040518082815260200191505060405180910390f35b60596061565b005b60005481565b6115be60008190555056fea2646970667358221220d98985e885cddc8ded38113516f75fef3cb05713a225920c02dbfa69b93d182d64736f6c63430007030033";

export class GrandChild__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GrandChild> {
    return super.deploy(overrides || {}) as Promise<GrandChild>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GrandChild {
    return super.attach(address) as GrandChild;
  }
  connect(signer: Signer): GrandChild__factory {
    return super.connect(signer) as GrandChild__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GrandChildInterface {
    return new utils.Interface(_abi) as GrandChildInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GrandChild {
    return new Contract(address, _abi, signerOrProvider) as GrandChild;
  }
}
